<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Ewan</title>
  
  <subtitle>Ewans note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-25T07:56:58.865Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ewan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin Enum</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-Enum/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-Enum/</id>
    <published>2020-02-25T07:56:33.000Z</published>
    <updated>2020-02-25T07:56:58.865Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize of Kotlin Enum</p><a id="more"></a><h2 id="6-Enum"><a href="#6-Enum" class="headerlink" title="6. Enum"></a>6. Enum</h2><h4 id="1-Initialization"><a href="#1-Initialization" class="headerlink" title="1. Initialization"></a>1. Initialization</h4><p>Enum classes as any other classes can have a constructor and be initialized</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>(<span class="keyword">val</span> rgb: <span class="built_in">Int</span>)&#123;</span><br><span class="line">    RED(<span class="number">0xFF000</span>),</span><br><span class="line">    GREEN(<span class="number">0x00FF00</span>),</span><br><span class="line">    BLUE(<span class="number">0x0000FF</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Simple-Enum"><a href="#2-Simple-Enum" class="headerlink" title="2. Simple Enum"></a>2. Simple Enum</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color2</span></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each enum constant is an object. Enum constants are separated with commas.</p><h4 id="3-Mutability"><a href="#3-Mutability" class="headerlink" title="3. Mutability"></a>3. Mutability</h4><p>Enums can be mutable, this is another way to obtain a singleton behavior:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color3</span></span>(<span class="keyword">var</span> x : <span class="built_in">Int</span> = <span class="number">0</span>)&#123;</span><br><span class="line">    EARTH(<span class="number">7</span> * <span class="number">10000</span>),</span><br><span class="line">    MARS();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = <span class="string">"<span class="variable">$name</span> [x = <span class="variable">$x</span>]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = Color3.MARS</span><br><span class="line">println(c)</span><br><span class="line">c.x = <span class="number">1234</span></span><br><span class="line">println(c)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize of Kotlin Enum&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Collection</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-Collection/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-Collection/</id>
    <published>2020-02-25T07:55:24.000Z</published>
    <updated>2020-02-25T07:56:08.934Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize of Kotlin Collection</p><a id="more"></a><h2 id="5-Collections"><a href="#5-Collections" class="headerlink" title="5. Collections"></a>5. Collections</h2><p>Unlike many language, Kotlin distinguishes between mutable and immutable collections.<br>Precise control over exactly when collections can be edited is useful for eliminating bugs, and designing good APIs.</p><h4 id="1-Using-list"><a href="#1-Using-list" class="headerlink" title="1. Using list"></a>1. Using list</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a new read-only List&lt;String&gt;</span></span><br><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">"Item1"</span>, <span class="string">"Item2"</span>, <span class="string">"Item3"</span>)</span><br><span class="line">list.add(<span class="string">"Item4"</span>)   <span class="comment">// compile error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Create a new editable List&lt;String&gt;</span></span><br><span class="line"><span class="keyword">val</span> list2 = mutableListOf(<span class="string">"Item1"</span>, <span class="string">"Item2"</span>, <span class="string">"Item3"</span>)</span><br><span class="line">list2.add(<span class="string">"Item4"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-Using-map"><a href="#2-Using-map" class="headerlink" title="2. Using map"></a>2. Using map</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read-only</span></span><br><span class="line"><span class="keyword">val</span> map = mapOf(Pair(<span class="number">1</span>, <span class="string">"Item1"</span>), Pair(<span class="number">2</span>, <span class="string">"Item2"</span>), Pair(<span class="number">3</span>, <span class="string">"Item3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Editable</span></span><br><span class="line"><span class="keyword">val</span> map2 = mutableMapOf(Pair(<span class="number">1</span>, <span class="string">"Item1"</span>), Pair(<span class="number">2</span>, <span class="string">"Item2"</span>), Pair(<span class="number">3</span>, <span class="string">"Item3"</span>))</span><br></pre></td></tr></table></figure><h4 id="3-Using-set"><a href="#3-Using-set" class="headerlink" title="3. Using set"></a>3. Using set</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read-only</span></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Editable</span></span><br><span class="line"><span class="keyword">val</span> set2 = mutableSetOf(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>.</p><!-- more --><h2 id="5-Collections-1"><a href="#5-Collections-1" class="headerlink" title="5. Collections"></a>5. Collections</h2><p>Unlike many language, Kotlin distinguishes between mutable and immutable collections.<br>Precise control over exactly when collections can be edited is useful for eliminating bugs, and designing good APIs.</p><h4 id="1-Using-list-1"><a href="#1-Using-list-1" class="headerlink" title="1. Using list"></a>1. Using list</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a new read-only List&lt;String&gt;</span></span><br><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">"Item1"</span>, <span class="string">"Item2"</span>, <span class="string">"Item3"</span>)</span><br><span class="line">list.add(<span class="string">"Item4"</span>)   <span class="comment">// compile error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Create a new editable List&lt;String&gt;</span></span><br><span class="line"><span class="keyword">val</span> list2 = mutableListOf(<span class="string">"Item1"</span>, <span class="string">"Item2"</span>, <span class="string">"Item3"</span>)</span><br><span class="line">list2.add(<span class="string">"Item4"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-Using-map-1"><a href="#2-Using-map-1" class="headerlink" title="2. Using map"></a>2. Using map</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read-only</span></span><br><span class="line"><span class="keyword">val</span> map = mapOf(Pair(<span class="number">1</span>, <span class="string">"Item1"</span>), Pair(<span class="number">2</span>, <span class="string">"Item2"</span>), Pair(<span class="number">3</span>, <span class="string">"Item3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Editable</span></span><br><span class="line"><span class="keyword">val</span> map2 = mutableMapOf(Pair(<span class="number">1</span>, <span class="string">"Item1"</span>), Pair(<span class="number">2</span>, <span class="string">"Item2"</span>), Pair(<span class="number">3</span>, <span class="string">"Item3"</span>))</span><br></pre></td></tr></table></figure><h4 id="3-Using-set-1"><a href="#3-Using-set-1" class="headerlink" title="3. Using set"></a>3. Using set</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read-only</span></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Editable</span></span><br><span class="line"><span class="keyword">val</span> set2 = mutableSetOf(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize of Kotlin Collection&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin String</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-String/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-String/</id>
    <published>2020-02-25T07:54:30.000Z</published>
    <updated>2020-02-25T07:55:00.773Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize of Kotlin String.</p><a id="more"></a><h2 id="3-String"><a href="#3-String" class="headerlink" title="3. String"></a>3. String</h2><h4 id="1-String-Equality"><a href="#1-String-Equality" class="headerlink" title="1. String Equality"></a>1. String Equality</h4><p>String are compared with == operator with check for their structural equality.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str1 = <span class="string">"Hello, World"</span></span><br><span class="line"><span class="keyword">val</span> str2 = <span class="string">"Hello,"</span> + <span class="string">" World"</span></span><br><span class="line">println(str1 == st2)    <span class="comment">// print true</span></span><br></pre></td></tr></table></figure><p>Referential equality is checked with <code>===</code> operator.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str1 = <span class="string">"""</span></span><br><span class="line"><span class="string"> |Hello, World!</span></span><br><span class="line"><span class="string"> """</span>.trimMargin()</span><br><span class="line"><span class="keyword">val</span> str2 = <span class="string">"""</span></span><br><span class="line"><span class="string"> #Hello, World!</span></span><br><span class="line"><span class="string"> """</span>.trimMargin(<span class="string">"#"</span>)</span><br><span class="line"><span class="keyword">val</span> str3 = str1</span><br><span class="line"></span><br><span class="line">println(str1 == str2) <span class="comment">// Prints true</span></span><br><span class="line">println(str1 === str2) <span class="comment">// Prints false</span></span><br><span class="line">println(str1 === str3) <span class="comment">// Prints true</span></span><br></pre></td></tr></table></figure><h4 id="2-String-Literals"><a href="#2-String-Literals" class="headerlink" title="2. String Literals"></a>2. String Literals</h4><p>Kotlin has two types of string literals:</p><ul><li>Escaped string</li><li>Raw string</li></ul><p><strong>Escaped string</strong> handles special characters by escaping them. The following escape sequences are supported: <code>\t, \b, \n, \r, \&#39;, \&quot;, \\ \$</code>, also use Unicode <code>\uFF00</code>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="string">"Hello \n Hello"</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="string">"Hello \t Hello"</span></span><br><span class="line"><span class="keyword">val</span> c = <span class="string">"Hello \b Hello"</span></span><br><span class="line"><span class="keyword">val</span> d = <span class="string">"Hello \r Hello"</span></span><br><span class="line"><span class="keyword">val</span> e = <span class="string">"Hello \' Hello"</span></span><br><span class="line"><span class="keyword">val</span> f = <span class="string">"Hello \" Hello"</span></span><br><span class="line"><span class="keyword">val</span> g = <span class="string">"Hello \\ Hello"</span></span><br><span class="line"><span class="keyword">val</span> h = <span class="string">"Hello \$ Hello"</span></span><br></pre></td></tr></table></figure><p>The result is like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"> Hello</span><br><span class="line">Hello  Hello</span><br><span class="line">Hello Hello</span><br><span class="line"> Hello</span><br><span class="line">Hello &apos; Hello</span><br><span class="line">Hello &quot; Hello</span><br><span class="line">Hello \ Hello</span><br><span class="line">Hello $ Hello</span><br></pre></td></tr></table></figure><p><strong>Raw string</strong> delimited by <code>&quot;&quot;&quot;&quot;</code>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="string">"""</span></span><br><span class="line"><span class="string"> for (c in "foo")</span></span><br><span class="line"><span class="string"> print(c)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>Leading whitespace can be removed with trimMargin() function.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="string">"""</span></span><br><span class="line"><span class="string"> |Tell me and I forget.</span></span><br><span class="line"><span class="string"> |Teach me and I remember.</span></span><br><span class="line"><span class="string"> |Involve me and I learn.</span></span><br><span class="line"><span class="string"> |(Benjamin Franklin)</span></span><br><span class="line"><span class="string"> """</span>.trimMargin()</span><br></pre></td></tr></table></figure><h4 id="3-Elements-of-String"><a href="#3-Elements-of-String" class="headerlink" title="3. Elements of String"></a>3. Elements of String</h4><p>Element of String are characters that can be accessed by the indexing operation string[index].</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"Hello, World!"</span></span><br><span class="line">println(str[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>String elements can be iterated with a for loop.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> str)&#123;</span><br><span class="line">    println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-String-Templates"><a href="#4-String-Templates" class="headerlink" title="4. String Templates"></a>4. String Templates</h4><p>String template starts with a dollar sign $ and consists of either a variable name:<br>Or an arbitrary expression in curly braces:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">"i = <span class="variable">$i</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">val</span> str = <span class="string">"<span class="variable">$a</span>.length is <span class="subst">$&#123;a.length&#125;</span>"</span> <span class="comment">// "abc.length is 3"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize of Kotlin String.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Arrays</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-Arrays/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-Arrays/</id>
    <published>2020-02-25T07:52:21.000Z</published>
    <updated>2020-02-25T07:54:01.778Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize of Kotlin Arrays.</p><a id="more"></a><h2 id="4-Arrays"><a href="#4-Arrays" class="headerlink" title="4. Arrays"></a>4. Arrays</h2><h4 id="1-Generic-Arrays"><a href="#1-Generic-Arrays" class="headerlink" title="1. Generic Arrays"></a>1. Generic Arrays</h4><p>Generic arrays in Kotlin are represented by <code>Array&lt;T&gt;</code></p><p>To create an empty array, use <code>emptyArray&lt;T&gt;()</code> factory function.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> empty = emptyArray&lt;String&gt;()</span><br></pre></td></tr></table></figure><p>Can use like below situation.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> someInputArray?.filterNotNull() ?: emptyArray()</span><br></pre></td></tr></table></figure><p>To create an array with given size and initial values, use the constructor.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = Array&lt;String&gt;(size = <span class="number">5</span>, <span class="keyword">init</span> = &#123;index -&gt; <span class="string">"Item #<span class="variable">$index</span>"</span>&#125;)</span><br><span class="line">println(Arrays.toString(arr))</span><br><span class="line">println(arr.size)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">emptyArr.<span class="keyword">set</span>(<span class="number">1</span>, <span class="string">"A"</span>)</span><br><span class="line">emptyArr.<span class="keyword">set</span>(<span class="number">2</span>, <span class="string">"B"</span>)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">emptyArr[<span class="number">1</span>] = <span class="string">"A"</span></span><br><span class="line">emptyArr[<span class="number">2</span>] = <span class="string">"B"</span></span><br></pre></td></tr></table></figure><h4 id="2-Arrays-of-Primitives"><a href="#2-Arrays-of-Primitives" class="headerlink" title="2. Arrays of Primitives"></a>2. Arrays of Primitives</h4><p>Those types do not inherit from Array<t> to avoid boxing, however, they have same attributes and method.</t></p><table><thead><tr><th>Kotlin type</th><th>Factory function</th><th>JVM type</th></tr></thead><tbody><tr><td>BooleanArray</td><td>booleanArrayOf(true, false)</td><td>boolean[ ]</td></tr><tr><td>ByteArray</td><td>byteArrayOf(1, 2, 3)</td><td>byte[ ]</td></tr><tr><td>CharArray</td><td>charArrayOf(‘a’, ‘b’, ‘c’)</td><td>char[ ]</td></tr><tr><td>DoubleArray</td><td>doubleArrayOf(1.2, 5.0)</td><td>double[ ]</td></tr><tr><td>FloatArray</td><td>floatArrayOf(1.2, 5.0)</td><td>float[ ]</td></tr><tr><td>IntArray</td><td>intArrayOf(1, 2, 3)</td><td>int[ ]</td></tr><tr><td>LongArray</td><td>longArrayOf(1, 2, 3)</td><td>long[ ]</td></tr><tr><td>ShortArray</td><td>shortArrayOf(1, 2, 3)</td><td>short[ ]</td></tr></tbody></table><h4 id="3-Create-an-array"><a href="#3-Create-an-array" class="headerlink" title="3. Create an array"></a>3. Create an array</h4><p>Can create array as factory method.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// create an Array&lt;Int&gt; of size 3 containing [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="4-Create-an-array-using-a-closure"><a href="#4-Create-an-array-using-a-closure" class="headerlink" title="4. Create an array using a closure"></a>4. Create an array using a closure</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = Array(<span class="number">3</span>)&#123; i -&gt; i * <span class="number">2</span> &#125;  <span class="comment">// create an Array&lt;Int&gt; of size 3 containing [0, 2, 4]</span></span><br></pre></td></tr></table></figure><h4 id="5-Create-an-uninitialized-array"><a href="#5-Create-an-uninitialized-array" class="headerlink" title="5. Create an uninitialized array"></a>5. Create an uninitialized array</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = arrayOfNulls&lt;<span class="built_in">Int</span>&gt;(<span class="number">3</span>)  <span class="comment">// creates an Array&lt;int&gt;? of [null, null, null]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize of Kotlin Arrays.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Basic grammar</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-Basic-grammar/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-Basic-grammar/</id>
    <published>2020-02-25T07:51:23.000Z</published>
    <updated>2020-02-25T07:53:38.185Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize of Kotlin basic grammar.</p><a id="more"></a><h2 id="2-1-Basic-Example"><a href="#2-1-Basic-Example" class="headerlink" title="2.1 Basic Example"></a>2.1 Basic Example</h2><h4 id="1-Unit"><a href="#1-Unit" class="headerlink" title="1. Unit"></a>1. Unit</h4><p>The <strong>Unit</strong> return type declaration is optional for functions. The following code are equivalent.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printHello</span><span class="params">(name : <span class="type">String</span>?)</span></span> : <span class="built_in">Unit</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name != <span class="literal">null</span>)&#123;</span><br><span class="line">            println(<span class="string">"Hello <span class="variable">$name</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printHello</span><span class="params">(name : <span class="type">String</span>?)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="literal">null</span>)&#123;</span><br><span class="line">        println(<span class="string">"Hello <span class="variable">$name</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Single-Expression-function"><a href="#2-Single-Expression-function" class="headerlink" title="2. Single-Expression function"></a>2. Single-Expression function</h4><p>When a function returns a single expression, curly braces can be omitted and the body is specified after = symbol.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">double</span> <span class="params">(x : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> = x *<span class="number">2</span></span><br></pre></td></tr></table></figure><p>And declaring the return type is optional when this can be inferred by compiler.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">double</span> <span class="params">(x : <span class="type">Int</span>)</span></span> = x * <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="3-NULL-hold"><a href="#3-NULL-hold" class="headerlink" title="3. NULL hold"></a>3. NULL hold</h4><p>In Kotlin, the type system distinguishes between references that can hold null and those that can not.<br>If use nullable value, should use <code>?</code>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a : String = <span class="string">"123"</span></span><br><span class="line">a = <span class="literal">null</span>    <span class="comment">// compile error</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a : String? = <span class="string">"123"</span></span><br><span class="line">a = <span class="literal">null</span>    <span class="comment">// working</span></span><br></pre></td></tr></table></figure><h4 id="4-Comparison"><a href="#4-Comparison" class="headerlink" title="4. Comparison"></a>4. Comparison</h4><p>In Kotlin, Actually check for equality of values.  By convention, an expression like a == b is translated to</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a?.equals(b) ?: (b === <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize of Kotlin basic grammar.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin GettingStartKotlin</title>
    <link href="http://yoursite.com/2020/02/24/Kotlin-GettingStartKotlin/"/>
    <id>http://yoursite.com/2020/02/24/Kotlin-GettingStartKotlin/</id>
    <published>2020-02-25T07:44:24.000Z</published>
    <updated>2020-02-25T07:53:53.690Z</updated>
    
    <content type="html"><![CDATA[<p>Summarize about Kotlin.</p><a id="more"></a><h2 id="1-1-Hello-World"><a href="#1-1-Hello-World" class="headerlink" title="1.1 Hello World"></a>1.1 Hello World</h2><p>All Kotlin programs start at the main function.</p><p>When targeting the JVM, the function will be compiled as a static method in a class with a name derived from the<br>filename. In the above example, the main class to run would be my.program.MainKt.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.program</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">"Hello Kotlin"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-With-companion-object"><a href="#1-2-With-companion-object" class="headerlink" title="1.2. With companion object"></a>1.2. With companion object</h3><p>Similar to using an Object Declaration, can define at Class lke this.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">            println(<span class="string">"hello"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The advantage to this method is more self-evident and any other functions you add are scope into the class App.</p><h3 id="1-3-With-Object-Declaration"><a href="#1-3-With-Object-Declaration" class="headerlink" title="1.3. With Object Declaration"></a>1.3. With Object Declaration</h3><p>Can alternatively use an Object Declaration what contains the main function.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> App &#123;</span><br><span class="line">    <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">        println(<span class="string">"hello with object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The advantage to this method is super self-evident and also have singleton instance of App.</p><h3 id="1-4-Compile-and-Run-Kotlin-Code"><a href="#1-4-Compile-and-Run-Kotlin-Code" class="headerlink" title="1.4. Compile and Run Kotlin Code"></a>1.4. Compile and Run Kotlin Code</h3><p>As java provide two different commands to compile and run Java code. Same as Kotlin also provide you different<br>commands.<br>javac to compile java files. java to run java files.<br>Same as kotlinc to compile kotlin files kotlin to run kotlin file.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summarize about Kotlin.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Develop/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot properties</title>
    <link href="http://yoursite.com/2020/02/24/SpringBoot-properties/"/>
    <id>http://yoursite.com/2020/02/24/SpringBoot-properties/</id>
    <published>2020-02-25T07:29:07.000Z</published>
    <updated>2020-02-25T07:33:47.550Z</updated>
    
    <content type="html"><![CDATA[<p>Spring can get Properties value from external properties file.</p><a id="more"></a><p>First, make <code>application.properties</code> file in resources file.</p><p>And write like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ewan.name = ewan</span><br><span class="line">ewan.ageNumber = 26</span><br><span class="line">ewan.age = $&#123;ewan.ageNumber&#125;</span><br><span class="line">ewan.sessionTimeout = 25</span><br></pre></td></tr></table></figure><p>Then, use like below code at Class file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalSettingRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;Ewan.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;Ewan.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        System.out.println(properties.name);</span><br><span class="line">        System.out.println(properties.name2);</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also mapping Class file.</p><p>First register Bean in Spring, second add annotation <code>@ConfigurationProperties</code> and also adapt validation as using <code>@Validated</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"ewan"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EwanProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ageNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DurationUnit</span>(ChronoUnit.SECONDS)</span><br><span class="line">    <span class="keyword">private</span> Duration sessionTimeout = Duration.ofSeconds(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAgeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ageNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAgeNumber</span><span class="params">(<span class="keyword">int</span> ageNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ageNumber = ageNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Duration <span class="title">getSessionTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionTimeout</span><span class="params">(Duration sessionTimeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sessionTimeout = sessionTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring can get Properties value from external properties file.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/Develop/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Internal webserver</title>
    <link href="http://yoursite.com/2020/02/24/SpringBoot-Internal-webserver/"/>
    <id>http://yoursite.com/2020/02/24/SpringBoot-Internal-webserver/</id>
    <published>2020-02-25T07:28:02.000Z</published>
    <updated>2020-02-25T07:28:27.482Z</updated>
    
    <content type="html"><![CDATA[<p>First of all, spring boot isn’t one of server. It just create WebServer instance internally.</p><a id="more"></a><p>To create internal WebServer, like below.</p><ol><li>Create Tomcat Object.</li><li>Set port.</li><li>Add context at Tomcat.</li><li>Create Servlet.</li><li>Add Servlet at Tomcat.</li><li>Mapping Servlet at Tomcat.</li><li>Execute Tomcat and wait.</li></ol><p>Here is executable WebServer without Springboot internal WebServer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();   <span class="comment">//1. Create Tomcat Object.</span></span><br><span class="line">    tomcat.setPort(<span class="number">7070</span>);   <span class="comment">//2. Set port.</span></span><br><span class="line"></span><br><span class="line">    Context context = tomcat.addContext(<span class="string">"/"</span>, <span class="string">"/"</span>);  <span class="comment">//3. Add context at Tomcat.</span></span><br><span class="line"></span><br><span class="line">    HttpServlet servlet = <span class="keyword">new</span> HttpServlet() &#123;   <span class="comment">//4. Create Servlet.</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            writer.println(<span class="string">"&lt;html&gt;"</span>);</span><br><span class="line">            writer.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">            writer.println(<span class="string">"hello!"</span>);</span><br><span class="line">            writer.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">            writer.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    String servletName = <span class="string">"helloServelet"</span>;</span><br><span class="line">    tomcat.addServlet(<span class="string">"/"</span>,servletName, servlet);    <span class="comment">//5. Add Servlet at Tomcat.</span></span><br><span class="line">    context.addServletMappingDecoded(<span class="string">"/hello"</span>, servletName);    <span class="comment">//6. Mapping Servlet at Tomcat.</span></span><br><span class="line"></span><br><span class="line">    tomcat.start();     <span class="comment">//7. Execute Tomcat and wait.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But, If use SpringBoot, do not have to care about above setting.</p><p>SpringBoot execute internal WebServer write as below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">app.run(args);</span><br></pre></td></tr></table></figure><p>If don’t want running as WebServer, can write below setting at <code>application.properties</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.main.web-application-type=none</span><br></pre></td></tr></table></figure><p>Then, SprungBoot run as normal application.</p><p>Also can setting port number what you want as shown below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=7070</span><br></pre></td></tr></table></figure><p>If want setting an available port automatically, write code as shown below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First of all, spring boot isn’t one of server. It just create WebServer instance internally.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/Develop/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Application</title>
    <link href="http://yoursite.com/2020/02/24/SpringBoot-Application/"/>
    <id>http://yoursite.com/2020/02/24/SpringBoot-Application/</id>
    <published>2020-02-25T07:26:41.000Z</published>
    <updated>2020-02-25T07:33:37.115Z</updated>
    
    <content type="html"><![CDATA[<p>The way for start application</p><a id="more"></a><p>There are few ways start Spring Boot Application in main method.</p><ol><li>Using static method.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Using instance (Able to customizing).</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">app.run(args);</span><br></pre></td></tr></table></figure><ol start="3"><li>using SpringApplicationBuilder.</li></ol><p>If want generate hierarchical Application Context, use SpringApplicationBuilder.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">        .sources(Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">        .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="Applcation-type"><a href="#Applcation-type" class="headerlink" title="Applcation type"></a>Applcation type</h3><p>Where are few application type.</p><ol><li>SERVLET</li></ol><p>Can execute based on Servlet as write below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        app.setWebApplicationType(WebApplicationType.SERVLET);</span><br><span class="line">        app.run(args);</span><br></pre></td></tr></table></figure><ol start="2"><li>No web</li></ol><p>Can execute based on just Java application as write below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        app.setWebApplicationType(WebApplicationType.NONE);</span><br><span class="line">        app.run(args);</span><br></pre></td></tr></table></figure><ol start="3"><li>Spring webflux</li></ol><p>Can execute based on Spring webflux as write below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        app.setWebApplicationType(WebApplicationType.REACTIVE);</span><br><span class="line">        app.run(args);</span><br></pre></td></tr></table></figure><h3 id="Argument-value"><a href="#Argument-value" class="headerlink" title="Argument value"></a>Argument value</h3><p>If you try to use an argument value and the value is <code>--bar</code>, can get this way as like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleListener2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleListener2</span><span class="params">(ApplicationArguments arguments)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bar: "</span> + arguments.containsOption(<span class="string">"bar"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-02-16 14:41:57.272  INFO 2452 --- [           main] me.ewan.ewan.Application                 : Starting Application on always with PID 2452 (C:\Users\gyun\IdeaProjects\SpringStudy+\build\classes\java\main started by gyun in C:\Users\gyun\IdeaProjects\SpringStudy+)</span><br><span class="line">2020-02-16 14:41:57.277  INFO 2452 --- [           main] me.ewan.ewan.Application                 : No active profile set, falling back to default profiles: default</span><br><span class="line">bar: true</span><br></pre></td></tr></table></figure><h3 id="Application-Listener"><a href="#Application-Listener" class="headerlink" title="Application Listener"></a>Application Listener</h3><p>Can get be imported at application startup and end point.</p><ol><li>ApplicationStartingEvent (When application starts)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationStartingEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationStartingEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"Application is starting"</span>);</span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in this case, ApplicationStartingEvent create more faster than Application Context.</p><p>So need additional task that add Listener at Main method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       app.addListeners(<span class="keyword">new</span> SimpleListener());</span><br><span class="line">       app.run(args);</span><br></pre></td></tr></table></figure><ol start="2"><li>ApplicationStartedEvent  (After application starts)</li></ol><p>In this case, ApplicationStartedEvent created later than Application Context, so do not need any additional task.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationStartedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationStartedEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"Application is started"</span>);</span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The way for start application&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/Develop/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Manage Dependency</title>
    <link href="http://yoursite.com/2020/02/24/SpringBoot-Manage-Dependency/"/>
    <id>http://yoursite.com/2020/02/24/SpringBoot-Manage-Dependency/</id>
    <published>2020-02-25T07:25:00.000Z</published>
    <updated>2020-02-25T07:33:44.953Z</updated>
    
    <content type="html"><![CDATA[<p>How configure spring dependency?</p><a id="more"></a><p>Spring boot is managed dependency base on <strong>spring-boot-starter-parent</strong> in pom.xml if using maven.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.0.M1&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    .........</span><br></pre></td></tr></table></figure><p>When click <strong>spring-boot-dependencies</strong>, can see real managed dependency configure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.0.M1&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">  &lt;description&gt;Parent pom providing dependency and plugin management for applications built with Maven&lt;/description&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line"></span><br><span class="line">    .........</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0.M1&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">  &lt;description&gt;Spring Boot Dependencies&lt;/description&gt;</span><br><span class="line">  &lt;url&gt;https://projects.spring.io/spring-boot/#&lt;/url&gt;</span><br><span class="line">  &lt;organization&gt;</span><br><span class="line">    &lt;name&gt;Pivotal Software, Inc.&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https://spring.io&lt;/url&gt;</span><br><span class="line">  &lt;/organization&gt;</span><br><span class="line">  &lt;licenses&gt;</span><br><span class="line">    &lt;license&gt;</span><br><span class="line">      &lt;name&gt;Apache License, Version 2.0&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/url&gt;</span><br><span class="line">    &lt;/license&gt;</span><br><span class="line">  &lt;/licenses&gt;</span><br><span class="line">  &lt;developers&gt;</span><br><span class="line">    &lt;developer&gt;</span><br><span class="line">      &lt;name&gt;Pivotal&lt;/name&gt;</span><br><span class="line">      &lt;email&gt;info@pivotal.io&lt;/email&gt;</span><br><span class="line">      &lt;organization&gt;Pivotal Software, Inc.&lt;/organization&gt;</span><br><span class="line">      &lt;organizationUrl&gt;https://www.spring.io&lt;/organizationUrl&gt;</span><br><span class="line">    &lt;/developer&gt;</span><br><span class="line">  &lt;/developers&gt;</span><br><span class="line">  &lt;scm&gt;</span><br><span class="line">    &lt;connection&gt;scm:git:git://github.com/spring-projects/spring-boot.git&lt;/connection&gt;</span><br><span class="line">    &lt;developerConnection&gt;scm:git:ssh://git@github.com/spring-projects/spring-boot.git&lt;/developerConnection&gt;</span><br><span class="line">    &lt;url&gt;https://github.com/spring-projects/spring-boot&lt;/url&gt;</span><br><span class="line">  &lt;/scm&gt;</span><br><span class="line">  &lt;issueManagement&gt;</span><br><span class="line">    &lt;system&gt;GitHub&lt;/system&gt;</span><br><span class="line">    &lt;url&gt;https://github.com/spring-projects/spring-boot/issues&lt;/url&gt;</span><br><span class="line">  &lt;/issueManagement&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;activemq.version&gt;5.15.11&lt;/activemq.version&gt;</span><br><span class="line">    &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;</span><br><span class="line">    &lt;appengine-sdk.version&gt;1.9.77&lt;/appengine-sdk.version&gt;</span><br><span class="line">    &lt;artemis.version&gt;2.10.1&lt;/artemis.version&gt;</span><br><span class="line">    &lt;aspectj.version&gt;1.9.5&lt;/aspectj.version&gt;</span><br><span class="line">    &lt;assertj.version&gt;3.14.0&lt;/assertj.version&gt;</span><br><span class="line">    &lt;atomikos.version&gt;4.0.6&lt;/atomikos.version&gt;</span><br><span class="line">    &lt;awaitility.version&gt;4.0.1&lt;/awaitility.version&gt;</span><br><span class="line">    &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;</span><br><span class="line">    &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;/build-helper-maven-plugin.version&gt;</span><br><span class="line">    &lt;byte-buddy.version&gt;1.10.4&lt;/byte-buddy.version&gt;</span><br><span class="line">    &lt;caffeine.version&gt;2.8.0&lt;/caffeine.version&gt;</span><br><span class="line"></span><br><span class="line">    .........</span><br></pre></td></tr></table></figure><p><code>&lt;parent&gt;</code> in pom.xml takes care of dependency management super well and Spring Boot recommend use <code>&lt;parent&gt;</code>.</p><p>If want custom own dependency configure without <code>&lt;parent&gt;</code> tag, can use <code>&lt;dependencyManagement&gt;</code> like below coed.   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!-- Import dependency management from Spring Boot --&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>If want add other dependency, just write dependency code in <code>&lt;dependencies&gt;</code> at pom.xml.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.0.M1&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">       .........</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- modelmapper --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.modelmapper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;modelmapper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ ls</span><br><span class="line">document/  HELP.md  mvnw*  mvnw.cmd  pom.xml  README.md  Spring-exe.iml  src/  target/  tomcat.8080/  tomcat.9090/</span><br><span class="line"></span><br><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ keytool -genkey -alias tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 4000</span><br><span class="line">Enter keystore password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">What is your first and last name?</span><br><span class="line">  [Unknown]:  Ewan choi</span><br><span class="line">What is the name of your organizational unit?</span><br><span class="line">  [Unknown]:  Ewan</span><br><span class="line">What is the name of your organization?</span><br><span class="line">  [Unknown]:  CEO</span><br><span class="line">What is the name of your City or Locality?</span><br><span class="line">  [Unknown]:  SEATTLE</span><br><span class="line">What is the name of your State or Province?</span><br><span class="line">  [Unknown]:  WA</span><br><span class="line">What is the two-letter country code for this unit?</span><br><span class="line">  [Unknown]:  yes</span><br><span class="line">Is CN=Ewan choi, OU=Ewan, O=CEO, L=SEATTLE, ST=WA, C=yes correct?</span><br><span class="line">  [no]:  yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ ls</span><br><span class="line">document/  HELP.md  keystore.p12  mvnw*  mvnw.cmd  pom.xml  README.md  Spring-exe.iml  src/  target/  tomcat.8080/  tomcat.9090/</span><br><span class="line"></span><br><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ curl - I --http http://localhost:8080</span><br><span class="line">curl: option -: is unknown</span><br><span class="line">curl: try &apos;curl --help&apos; or &apos;curl --manual&apos; for more information</span><br><span class="line"></span><br><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ curl -I --http http://localhost:8080</span><br><span class="line">curl: option --http: is ambiguous</span><br><span class="line">curl: try &apos;curl --help&apos; or &apos;curl --manual&apos; for more information</span><br><span class="line"></span><br><span class="line">gyun@always MINGW64 ~/IdeaProjects/Spring-exe (master)</span><br><span class="line">$ curl -I --http2 http://localhost:8080</span><br><span class="line">HTTP/1.1 404</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Thu, 13 Feb 2020 07:05:09 GMT</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How configure spring dependency?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/Develop/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP</title>
    <link href="http://yoursite.com/2020/02/24/Spring-AOP/"/>
    <id>http://yoursite.com/2020/02/24/Spring-AOP/</id>
    <published>2020-02-25T07:22:05.000Z</published>
    <updated>2020-02-25T07:34:51.178Z</updated>
    
    <content type="html"><![CDATA[<p>What is AOP(Aspect-oriented programming)?</p><a id="more"></a><p>AOP is programming method that applies common function when necessary outside the developer’s code.</p><h4 id="AOP-key-technique"><a href="#AOP-key-technique" class="headerlink" title="AOP key technique"></a>AOP key technique</h4><ul><li>Aspect &amp; Target</li><li>Advice</li><li>Join point &amp; PointCut</li></ul><h4 id="AOP-implement"><a href="#AOP-implement" class="headerlink" title="AOP implement"></a>AOP implement</h4><ul><li>Java<ul><li>Aspect J</li><li>Spring AOP</li></ul></li></ul><h4 id="How-to-implement-AOP"><a href="#How-to-implement-AOP" class="headerlink" title="How to implement AOP"></a>How to implement AOP</h4><ul><li>Compile   (Aspect J)</li><li>Load time</li><li>Runtime   (Spring AOP)</li></ul><h4 id="Spring-AOP-Features"><a href="#Spring-AOP-Features" class="headerlink" title="Spring AOP Features"></a>Spring AOP Features</h4><ul><li>Proxy based AOP implement</li><li>Only can adapt Spring bean</li></ul><p>AOP using Spring Proxy can make like below code and purpose is time check each method.</p><p>First, create interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteEvent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, create class that implement EventService.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventService</span> <span class="keyword">implements</span> <span class="title">EventService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Create an event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Published an event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Delete an Event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And create another class implement EventService and write SimpleEventService at each method and write @Primary for give priority to dependency injection.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySimpleEventService</span> <span class="keyword">implements</span> <span class="title">EventService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SimpleEventService simpleEventService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        simpleEventService.createEvent();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - begin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        simpleEventService.publishEvent();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - begin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        simpleEventService.deleteEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But this way a little bit cumbersome.</p><p>That why Spring AOP appeared.</p><p>First add dependency Spring AOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Write @Aspect above class.</p><p>Want code that wants AOP function at linePerf and write @Around as whether based on annotation or execution.</p><p>Also can use @Before that execute before method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerfAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Around("execution(* com.example..*.EventService.*(..))")</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(PerfLogging)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">linePerf</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        Object retVal = joinPoint.proceed();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - begin);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"bean(simpleEventService)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is AOP(Aspect-oriented programming)?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Exoression Language</title>
    <link href="http://yoursite.com/2020/02/24/Spring-Exoression-Language/"/>
    <id>http://yoursite.com/2020/02/24/Spring-Exoression-Language/</id>
    <published>2020-02-25T07:20:59.000Z</published>
    <updated>2020-02-25T07:34:57.824Z</updated>
    
    <content type="html"><![CDATA[<p>What is Spring Expression Language?</p><a id="more"></a><p>Spring Expression Language is just expression language in Spring. Supported since spring 3.0.</p><p>Several way to Expression Spel, first write in ‘#{}’ literal.</p><ol><li>Plus Integer.</li><li>Plus String.</li><li>Expression Boolean.</li><li>Get property (using ‘${ }’ literal).</li><li>Get Bean.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpelRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;1 + 1&#125;"</span>) <span class="comment">//Plus Integer.</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;'hello ' + 'world'&#125;"</span>) <span class="comment">//Plus String.</span></span><br><span class="line">    String greeting;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;1 eq 1&#125;"</span>) <span class="comment">//Expression Boolean.</span></span><br><span class="line">    <span class="keyword">boolean</span> trueOrFalse;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;my.value&#125;"</span>)   <span class="comment">//Get property.</span></span><br><span class="line">    <span class="keyword">int</span> myValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;$&#123;my.value&#125; eq 100&#125;"</span>) <span class="comment">//Expression Boolean of get property.</span></span><br><span class="line">    <span class="keyword">boolean</span> isMyValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;'spring'&#125;"</span>)   <span class="comment">//Expression just string</span></span><br><span class="line">    String spring;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;sample.data&#125;"</span>)    <span class="comment">//Get Bean.</span></span><br><span class="line">    <span class="keyword">int</span> sampleData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(greeting);</span><br><span class="line">        System.out.println(trueOrFalse);</span><br><span class="line">        System.out.println(myValue);</span><br><span class="line">        System.out.println(isMyValue);</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(sampleData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Actually-used"><a href="#Actually-used" class="headerlink" title="Actually used"></a>Actually used</h3><ul><li>Value annotation</li><li>@ConditionalOnExpression annotation</li><li>Spring Security</li><li>Spring Data (@Query annotation)</li><li>Thymeleaf</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is Spring Expression Language?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data binding</title>
    <link href="http://yoursite.com/2020/02/24/Spring-Data-binding/"/>
    <id>http://yoursite.com/2020/02/24/Spring-Data-binding/</id>
    <published>2020-02-25T07:19:56.000Z</published>
    <updated>2020-02-25T07:34:54.576Z</updated>
    
    <content type="html"><![CDATA[<p>What is DataBinding?</p><a id="more"></a><p>Spring DataBinding is mapping to domain from user input value.</p><p>Server read just string for user input value.</p><p>So, Need mapping to specific object or data type.</p><p>Here is some controller for mapping input value.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/event/&#123;event&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEvent</span><span class="params">(@PathVariable BindData bindData)</span></span>&#123;</span><br><span class="line">        System.out.println(bindData);</span><br><span class="line">        <span class="keyword">return</span> bindData.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And BindData object is like that.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindData</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BindData&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", title='"</span> + title + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test code for above code like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EventControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">"/event/1"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect((ResultMatcher) content().string(<span class="string">"1"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is fail.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Missing URI template variable &apos;bindData&apos; for method parameter of type BindData]</span><br></pre></td></tr></table></figure><p>In this case, have to notify to spring how can transform data.</p><p>First of all, can use PropertyEditorSupport like below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BindData binddata = (BindData)getValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> binddata.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        setValue(<span class="keyword">new</span> BindData(Integer.parseInt(text)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When use PropertyEditorSupport for format data type, can use getAsText() and setAsText().<br>‘getAsText()’ method is binding object to string. ‘setAsText’ method is binding string to object.</p><p>However this way has some problem and too old. For example, not thread safe, can not register Bean, just can transform string to object or object to string.</p><h2 id="Converter-amp-Formatter"><a href="#Converter-amp-Formatter" class="headerlink" title="Converter &amp; Formatter"></a>Converter &amp; Formatter</h2><p>Converter and Formatter appeared to replace PropertyEditor.</p><p>The Converter is converter for type S to T and Thread-safe. Formatter is converter object to String and provide function to multinationalization.</p><h3 id="Converter-implementation"><a href="#Converter-implementation" class="headerlink" title="Converter implementation"></a>Converter implementation</h3><p>Converter can implement two parameter Source and Target. Also Converter is Thread-safe unlike PropertyEditor, so can register it as a Spring bean.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEventConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event <span class="title">convert</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(source));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventToStringConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Event</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(Event source)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> source.getId().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also need register at WebMvcConfigure if use above way Converter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> EventConverter.StringToEventConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Formatter-implementation"><a href="#Formatter-implementation" class="headerlink" title="Formatter implementation"></a>Formatter implementation</h3><p>Formatter receive just one parameter because it just transfer object to string or string to object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">parse</span><span class="params">(String text, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(text));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Event object, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Register Formatter WebMvcConfigurer as like Converter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addFormatter(<span class="keyword">new</span> EventFormatter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Converstion-Service"><a href="#Converstion-Service" class="headerlink" title="Converstion Service"></a>Converstion Service</h3><p>When use Converter and Formatter, registered ConversionService through WebMvcConfigurer.</p><p>Real convert at ConversionService and automatically inject as bean at Spring Boot.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ConversionService conversionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(conversionService.getClass().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebConversionService"><a href="#WebConversionService" class="headerlink" title="WebConversionService"></a>WebConversionService</h3><p>WebConversionService which provide Spring boot inject Formatter and Converter automatically.w</p><p>So, do not need to write WebMvcConfigurer like above code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">parse</span><span class="params">(String text, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(text));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Event object, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventConverter</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEventConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event <span class="title">convert</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(source));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventToStringConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Event</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(Event source)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> source.getId().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is DataBinding?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Resource Abstraction</title>
    <link href="http://yoursite.com/2020/02/24/Spring-Resource-Abstraction/"/>
    <id>http://yoursite.com/2020/02/24/Spring-Resource-Abstraction/</id>
    <published>2020-02-25T07:18:36.000Z</published>
    <updated>2020-02-25T07:33:33.440Z</updated>
    
    <content type="html"><![CDATA[<p>What is ResourceAbstraction?</p><a id="more"></a><p>Resource Abstraction is an abstraction of ‘java.net.URL’.</p><h3 id="Java-net-URL"><a href="#Java-net-URL" class="headerlink" title="Java.net.URL"></a>Java.net.URL</h3><p>Java.net.URL class is for get resource in web.</p><p>To use java.net.URL is like below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.google.com"</span>);</span><br><span class="line">        URLConnection urlConnection = url.openConnection();</span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">        String data = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            data = bufferedReader.readLine();</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is like that and can see google html source.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;&lt;html itemscope=&quot;&quot; itemtype=&quot;http://schema.org/WebPage&quot; lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta content=&quot;Search the world&apos;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&apos;re looking for.&quot; name=&quot;description&quot;&gt;&lt;meta content=&quot;noodp&quot; name=&quot;robots&quot;&gt;&lt;meta content=&quot;text/html; charset=UTF-8&quot; http-equiv=&quot;Content-Type&quot;&gt;&lt;meta content=&quot;/images/branding/googleg/1x/googleg_standard_color_128dp.png&quot; itemprop=&quot;image&quot;&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;(function()&#123;window.google=&#123;kEI:&apos;-ek8XsuqOPrB0PEPzYuGgAQ&apos;,kEXPI:&apos;0,1353746,5663,731,223,5104,207,2414,540,250,10,289,762,175,364,926,440,69,4,60,690,52,75,383,141,416,529,11,477,35,415585,712177,1197775,374,28,329090,1294,12383,4855,32692,15247,867,28684,364,8824,8384,1325,3534,1361,4323,4968,3022,4745,3123,7910,1808,1978,2042,5766,1,3142,5297,2054,920,873,1217,2975,2785,1509,2136,1142,9544,620,2884,20,318,1981,1191,1348,2774,519,400,2277,8,2796,1593,1279,390,652,1170,202,328,149,1103,840,517,1466,8,48,157,663,3438,108,152,52,1135,1,3,2063,606,1839,184,545,1232,143,377,686,1261,747,283,1,145,44,1009,93,328,1284,16,84,417,2426,1639,608,473,1339,29,719,1039,3227,773,2072,7,817,503,4279,2034,6513,2344,318,170,898,303,1720,2459,1226,398,1058,6,281,2842,812,1274,108,1246,1027,566,87,481,908,2,433,142,365,533,314,8,1394,366,2132,265,326,1530,97,3049,62,355,225,691,305,828,1,550,290,176,10,2,23,1696,97,258,210,426,88,185,625,189,183,109,279,40,127,37,90,1,494,7,665,30,932,121,7,238,396,1026,3,377,328,1276,1183,296,395,295,947,501,82,65,70,44,463,408,2,139,199,2,52,20,109,372,145,972,28,5850365,3257,1802637,4194968,2801054,549,333,444,1,2,80,1,900,896,1,8,1,2,2551,1,748,141,59,736,563,1,4265,1,1,1,1,137,1,879,9,305,141,98,83,100,16,67,3365237,20598662,23&apos;,kBL:&apos;TVpb&apos;&#125;;google.sn=&apos;webhp&apos;;google.kHL=&apos;en&apos;;&#125;)();(function()&#123;google.lc=[];google.li=0;google.getEI=function(a)&#123;for(var b;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute(&quot;eid&quot;)));)a=a.parentNode;return b||google.kEI&#125;;google.getLEI=function(a)&#123;for(var b=null;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute(&quot;leid&quot;)));)a=a.parentNode;return b&#125;;google.ml=function()&#123;return null&#125;;google.time=function()&#123;return Date.now()&#125;;google.log=function(a,b,e,c,g)&#123;if(a=google.logUrl(a,b,e,c,g))&#123;b=new Image;var d=google.lc,f=google.li;d[f]=b;b.onerror=b.onload=b.onabort=function()&#123;delete d[f]&#125;;google.vel&amp;&amp;google.vel.lu&amp;&amp;google.vel.lu(a);b.src=a;google.li=f+1&#125;&#125;;google.logUrl=function(a,b,e,c,g)&#123;var d=&quot;&quot;,f=google.ls||&quot;&quot;;e||-1!=b.search(&quot;&amp;ei=&quot;)||(d=&quot;&amp;ei=&quot;+google.getEI(c),-1==b.search(&quot;&amp;lei=&quot;)&amp;&amp;(c=google.getLEI(c))&amp;&amp;(d+=&quot;&amp;lei=&quot;+c));c=&quot;&quot;;!e&amp;&amp;google.cshid&amp;&amp;-1==b.search(&quot;&amp;cshid=&quot;)&amp;&amp;&quot;slh&quot;!=a&amp;&amp;(c=&quot;&amp;cshid=&quot;+google.cshid);a=e||&quot;/&quot;+(g||&quot;gen_204&quot;)+&quot;?atyp=i&amp;ct=&quot;+a+&quot;&amp;cad=&quot;+b+d+f+&quot;&amp;zx=&quot;+google.time()+c;/^http:/i.test(a)&amp;&amp;&quot;https:&quot;==window.location.protocol&amp;&amp;(google.ml(Error(&quot;a&quot;),!1,&#123;src:a,glmm:1&#125;),a=&quot;&quot;);return a&#125;;&#125;).call(this);(function()&#123;google.y=&#123;&#125;;google.x=function(a,b)&#123;if(a)var c=a.id;else&#123;do c=Math.random();while(google.y[c])&#125;google.y[c]=[a,b];return!1&#125;;google.lm=[];google.plm=function(a)&#123;google.lm.push.apply(google.lm,a)&#125;;google.lq=[];google.load=function(a,b,c)&#123;google.lq.push([[a],b,c])&#125;;google.loadAll=function(a,b)&#123;google.lq.push([a,b])&#125;;&#125;).call(this);google.f=&#123;&#125;;(function()&#123;</span><br><span class="line">document.documentElement.addEventListener(&quot;submit&quot;,function(b)&#123;var a;if(a=b.target)&#123;var c=a.getAttribute(&quot;data-submitfalse&quot;);a=&quot;1&quot;==c||&quot;q&quot;==c&amp;&amp;!a.elements.q.value?!0:!1&#125;else a=!1;a&amp;&amp;(b.preventDefault(),b.stopPropagation())&#125;,!0);document.documentElement.addEventListener(&quot;click&quot;,function(b)&#123;var a;a:&#123;for(a=b.target;a&amp;&amp;a!=document.documentElement;a=a.parentElement)if(&quot;A&quot;==a.tagName)&#123;a=&quot;1&quot;==a.getAttribute(&quot;data-nohref&quot;);break a&#125;a=!1&#125;a&amp;&amp;b.preventDefault()&#125;,!0);&#125;).call(this);</span><br><span class="line">var a=window.location,b=a.href.indexOf(&quot;#&quot;);if(0&lt;=b)&#123;var c=a.href.substring(b+1);/(^|&amp;)q=/.test(c)&amp;&amp;-1==c.indexOf(&quot;#&quot;)&amp;&amp;a.replace(&quot;/search?&quot;+c.replace(/(^|&amp;)fp=[^&amp;]*/g,&quot;&quot;)+&quot;&amp;cad=h&quot;)&#125;;&lt;/script&gt;&lt;style&gt;#gbar,#guser&#123;font-size:13px;padding-top:1px !important;&#125;#gbar&#123;height:22px&#125;#guser&#123;padding-bottom:7px !important;text-align:right&#125;.gbh,.gbd&#123;border-top:1px solid #c9d7f1;font-size:1px&#125;.gbh&#123;height:0;position:absolute;top:24px;width:100%&#125;@media all&#123;.gb1&#123;height:22px;margin-right:.5em;vertical-align:top&#125;#gbar&#123;float:left&#125;&#125;a.gb1,a.gb4&#123;text-decoration:underline !important&#125;a.gb1,a.gb4&#123;color:#00c !important&#125;.gbi .gb4&#123;color:#dd8e27 !important&#125;.gbf .gb4&#123;color:#900 !important&#125;</span><br><span class="line">&lt;/style&gt;&lt;style&gt;body,td,a,p,.h&#123;font-family:arial,sans-serif&#125;body&#123;margin:0;overflow-y:scroll&#125;#gog&#123;padding:3px 8px 0&#125;td&#123;line-height:.8em&#125;.gac_m td&#123;line-height:17px&#125;form&#123;margin-bottom:20px&#125;.h&#123;color:#36c&#125;.q&#123;color:#00c&#125;.ts td&#123;padding:0&#125;.ts&#123;border-collapse:collapse&#125;em&#123;font-weight:bold;font-style:normal&#125;.lst&#123;height:25px;width:496px&#125;.gsfi,.lst&#123;font:18px arial,sans-serif&#125;.gsfs&#123;font:17px arial,sans-serif&#125;.ds&#123;display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px&#125;input&#123;font-family:inherit&#125;a.gb1,a.gb2,a.gb3,a.gb4&#123;color:#11c !important&#125;body&#123;background:#fff;color:#000&#125;a&#123;color:#11c;text-decoration:none&#125;a:hover,a:active&#123;text-decoration:underline&#125;.fl a&#123;color:#36c&#125;a:visited&#123;color:#551a8b&#125;a.gb1,a.gb4&#123;text-decoration:underline&#125;a.gb3:hover&#123;text-decoration:none&#125;#ghead a.gb2:hover&#123;color:#fff !important&#125;.sblc&#123;padding-top:5px&#125;.sblc a&#123;display:block;margin:2px 0;margin-left:13px;font-size:11px&#125;.lsbb&#123;background:#eee;border:solid 1px;border-color:#ccc #999 #999 #ccc;height:30px&#125;.lsbb&#123;display:block&#125;.ftl,#fll a&#123;display:inline-block;margin:0 12px&#125;.lsb&#123;background:url(/images/nav_logo229.png) 0 -261px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top&#125;.lsb:active&#123;background:#ccc&#125;.lst:focus&#123;outline:none&#125;&lt;/style&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#fff&quot;&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;(function()&#123;var src=&apos;/images/nav_logo229.png&apos;;var iesg=false;document.body.onload = function()&#123;window.n &amp;&amp; window.n();if (document.images)&#123;new Image().src=src;&#125;</span><br><span class="line">if (!iesg)&#123;document.f&amp;&amp;document.f.q.focus();document.gbqf&amp;&amp;document.gbqf.q.focus();&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();&lt;/script&gt;&lt;div id=&quot;mngb&quot;&gt; &lt;div id=gbar&gt;&lt;nobr&gt;&lt;b class=gb1&gt;Search&lt;/b&gt; &lt;a class=gb1 href=&quot;http://www.google.com/imghp?hl=en&amp;tab=wi&quot;&gt;Images&lt;/a&gt; &lt;a class=gb1 href=&quot;http://maps.google.com/maps?hl=en&amp;tab=wl&quot;&gt;Maps&lt;/a&gt; &lt;a class=gb1 href=&quot;https://play.google.com/?hl=en&amp;tab=w8&quot;&gt;Play&lt;/a&gt; &lt;a class=gb1 href=&quot;http://www.youtube.com/?gl=US&amp;tab=w1&quot;&gt;YouTube&lt;/a&gt; &lt;a class=gb1 href=&quot;http://news.google.com/nwshp?hl=en&amp;tab=wn&quot;&gt;News&lt;/a&gt; &lt;a class=gb1 href=&quot;https://mail.google.com/mail/?tab=wm&quot;&gt;Gmail&lt;/a&gt; &lt;a class=gb1 href=&quot;https://drive.google.com/?tab=wo&quot;&gt;Drive&lt;/a&gt; &lt;a class=gb1 style=&quot;text-decoration:none&quot; href=&quot;https://www.google.com/intl/en/about/products?tab=wh&quot;&gt;&lt;u&gt;More&lt;/u&gt; &amp;raquo;&lt;/a&gt;&lt;/nobr&gt;&lt;/div&gt;&lt;div id=guser width=100%&gt;&lt;nobr&gt;&lt;span id=gbn class=gbi&gt;&lt;/span&gt;&lt;span id=gbf class=gbf&gt;&lt;/span&gt;&lt;span id=gbe&gt;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/history/optout?hl=en&quot; class=gb4&gt;Web History&lt;/a&gt; | &lt;a  href=&quot;/preferences?hl=en&quot; class=gb4&gt;Settings&lt;/a&gt; | &lt;a target=_top id=gb_70 href=&quot;https://accounts.google.com/ServiceLogin?hl=en&amp;passive=true&amp;continue=http://www.google.com/&quot; class=gb4&gt;Sign in&lt;/a&gt;&lt;/nobr&gt;&lt;/div&gt;&lt;div class=gbh style=left:0&gt;&lt;/div&gt;&lt;div class=gbh style=right:0&gt;&lt;/div&gt; &lt;/div&gt;&lt;center&gt;&lt;br clear=&quot;all&quot; id=&quot;lgpd&quot;&gt;&lt;div id=&quot;lga&quot;&gt;&lt;img alt=&quot;Google&quot; height=&quot;92&quot; src=&quot;/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png&quot; style=&quot;padding:28px 0 14px&quot; width=&quot;272&quot; id=&quot;hplogo&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;form action=&quot;/search&quot; name=&quot;f&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr valign=&quot;top&quot;&gt;&lt;td width=&quot;25%&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;input name=&quot;ie&quot; value=&quot;ISO-8859-1&quot; type=&quot;hidden&quot;&gt;&lt;input value=&quot;en&quot; name=&quot;hl&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;source&quot; type=&quot;hidden&quot; value=&quot;hp&quot;&gt;&lt;input name=&quot;biw&quot; type=&quot;hidden&quot;&gt;&lt;input name=&quot;bih&quot; type=&quot;hidden&quot;&gt;&lt;div class=&quot;ds&quot; style=&quot;height:32px;margin:4px 0&quot;&gt;&lt;input class=&quot;lst&quot; style=&quot;color:#000;margin:0;padding:5px 8px 0 6px;vertical-align:top&quot; autocomplete=&quot;off&quot; value=&quot;&quot; title=&quot;Google Search&quot; maxlength=&quot;2048&quot; name=&quot;q&quot; size=&quot;57&quot;&gt;&lt;/div&gt;&lt;br style=&quot;line-height:0&quot;&gt;&lt;span class=&quot;ds&quot;&gt;&lt;span class=&quot;lsbb&quot;&gt;&lt;input class=&quot;lsb&quot; value=&quot;Google Search&quot; name=&quot;btnG&quot; type=&quot;submit&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ds&quot;&gt;&lt;span class=&quot;lsbb&quot;&gt;&lt;input class=&quot;lsb&quot; id=&quot;tsuid1&quot; value=&quot;I&apos;m Feeling Lucky&quot; name=&quot;btnI&quot; type=&quot;submit&quot;&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;(function()&#123;var id=&apos;tsuid1&apos;;document.getElementById(id).onclick = function()&#123;if (this.form.q.value)&#123;this.checked = 1;if (this.form.iflsig)this.form.iflsig.disabled = false;&#125;</span><br><span class="line">else top.location=&apos;/doodles/&apos;;&#125;;&#125;)();&lt;/script&gt;&lt;input value=&quot;AAP1E1EAAAAAXjz4CTG7e6kx36Y_FxO2l8lJU04vcprj&quot; name=&quot;iflsig&quot; type=&quot;hidden&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;fl sblc&quot; align=&quot;left&quot; nowrap=&quot;&quot; width=&quot;25%&quot;&gt;&lt;a href=&quot;/advanced_search?hl=en&amp;amp;authuser=0&quot;&gt;Advanced search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;input id=&quot;gbv&quot; name=&quot;gbv&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;(function()&#123;var a,b=&quot;1&quot;;if(document&amp;&amp;document.getElementById)if(&quot;undefined&quot;!=typeof XMLHttpRequest)b=&quot;2&quot;;else if(&quot;undefined&quot;!=typeof ActiveXObject)&#123;var c,d,e=[&quot;MSXML2.XMLHTTP.6.0&quot;,&quot;MSXML2.XMLHTTP.3.0&quot;,&quot;MSXML2.XMLHTTP&quot;,&quot;Microsoft.XMLHTTP&quot;];for(c=0;d=e[c++];)try&#123;new ActiveXObject(d),b=&quot;2&quot;&#125;catch(h)&#123;&#125;&#125;a=b;if(&quot;2&quot;==a&amp;&amp;-1==location.search.indexOf(&quot;&amp;gbv=2&quot;))&#123;var f=google.gbvu,g=document.getElementById(&quot;gbv&quot;);g&amp;&amp;(g.value=a);f&amp;&amp;window.setTimeout(function()&#123;location.href=f&#125;,0)&#125;;&#125;).call(this);&lt;/script&gt;&lt;/form&gt;&lt;div id=&quot;gac_scont&quot;&gt;&lt;/div&gt;&lt;div style=&quot;font-size:83%;min-height:3.5em&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;span id=&quot;footer&quot;&gt;&lt;div style=&quot;font-size:10pt&quot;&gt;&lt;div style=&quot;margin:19px auto;text-align:center&quot; id=&quot;fll&quot;&gt;&lt;a href=&quot;/intl/en/ads/&quot;&gt;Advertising�Programs&lt;/a&gt;&lt;a href=&quot;/services/&quot;&gt;Business Solutions&lt;/a&gt;&lt;a href=&quot;/intl/en/about.html&quot;&gt;About Google&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p style=&quot;color:#767676;font-size:8pt&quot;&gt;&amp;copy; 2020 - &lt;a href=&quot;/intl/en/policies/privacy/&quot;&gt;Privacy&lt;/a&gt; - &lt;a href=&quot;/intl/en/policies/terms/&quot;&gt;Terms&lt;/a&gt;&lt;/p&gt;&lt;/span&gt;&lt;/center&gt;&lt;script nonce=&quot;uoSXLrjcvK7lZRFB6pZTzQ==&quot;&gt;(function()&#123;window.google.cdo=&#123;height:0,width:0&#125;;(function()&#123;var a=window.innerWidth,b=window.innerHeight;if(!a||!b)&#123;var c=window.document,d=&quot;CSS1Compat&quot;==c.compatMode?c.documentElement:c.body;a=d.clientWidth;b=d.clientHeight&#125;a&amp;&amp;b&amp;&amp;(a!=google.cdo.width||b!=google.cdo.height)&amp;&amp;google.log(&quot;&quot;,&quot;&quot;,&quot;/client_204?&amp;atyp=i&amp;biw=&quot;+a+&quot;&amp;bih=&quot;+b+&quot;&amp;ei=&quot;+google.kEI);&#125;).call(this);&#125;)();(function()&#123;var u=&apos;/xjs/_/js/k\x3dxjs.hp.en_US.0n_29zxlCpM.O/m\x3dsb_he,d/am\x3dgAEBNgI/d\x3d1/rs\x3dACT90oHecxHL9bZB51ShQC7R1ZUqFxsZtg&apos;;</span><br><span class="line">setTimeout(function()&#123;var b=document;var a=&quot;SCRIPT&quot;;&quot;application/xhtml+xml&quot;===b.contentType&amp;&amp;(a=a.toLowerCase());a=b.createElement(a);a.src=u;google.timers&amp;&amp;google.timers.load&amp;&amp;google.tick&amp;&amp;google.tick(&quot;load&quot;,&quot;xjsls&quot;);document.body.appendChild(a)&#125;,0);&#125;)();(function()&#123;window.google.xjsu=&apos;/xjs/_/js/k\x3dxjs.hp.en_US.0n_29zxlCpM.O/m\x3dsb_he,d/am\x3dgAEBNgI/d\x3d1/rs\x3dACT90oHecxHL9bZB51ShQC7R1ZUqFxsZtg&apos;;&#125;)();function _DumpException(e)&#123;throw e;&#125;</span><br><span class="line">function _F_installCss(c)&#123;&#125;</span><br><span class="line">(function()&#123;google.spjs=false;google.snet=true;google.em=[];google.emw=false;google.pdt=0;&#125;)();(function()&#123;var pmc=&apos;&#123;\x22d\x22:&#123;&#125;,\x22sb_he\x22:&#123;\x22agen\x22:true,\x22cgen\x22:true,\x22client\x22:\x22heirloom-hp\x22,\x22dh\x22:true,\x22dhqt\x22:true,\x22ds\x22:\x22\x22,\x22ffql\x22:\x22en\x22,\x22fl\x22:true,\x22host\x22:\x22google.com\x22,\x22isbh\x22:28,\x22jsonp\x22:true,\x22msgs\x22:&#123;\x22cibl\x22:\x22Clear Search\x22,\x22dym\x22:\x22Did you mean:\x22,\x22lcky\x22:\x22I\\u0026#39;m Feeling Lucky\x22,\x22lml\x22:\x22Learn more\x22,\x22oskt\x22:\x22Input tools\x22,\x22psrc\x22:\x22This search was removed from your \\u003Ca href\x3d\\\x22/history\\\x22\\u003EWeb History\\u003C/a\\u003E\x22,\x22psrl\x22:\x22Remove\x22,\x22sbit\x22:\x22Search by image\x22,\x22srch\x22:\x22Google Search\x22&#125;,\x22ovr\x22:&#123;&#125;,\x22pq\x22:\x22\x22,\x22refpd\x22:true,\x22rfs\x22:[],\x22sbpl\x22:16,\x22sbpr\x22:16,\x22scd\x22:10,\x22stok\x22:\x22wtsftaDVqOV_M46qFgM191_LrnQ\x22,\x22uhde\x22:false&#125;&#125;&apos;;google.pmc=JSON.parse(pmc);&#125;)();&lt;/script&gt;        &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>So, why spring did abstraction java.net.URL?<br>First of all, getting web data using URL is to get resource and getting resource from classpath is to get resource too.</p><p>That’s the reason why spring abstraction java.net.URL for can get resource from classpath, ServletContext and complex to using URL class for get resource from web.</p><p>The way how to get resource from classpath.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Resource res = resourceLoader.getResource(<span class="string">"classpath:test.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res.exists())&#123;</span><br><span class="line"></span><br><span class="line">            String data = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            InputStream inputStream = res.getInputStream();</span><br><span class="line">            InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                data = bufferedReader.readLine();</span><br><span class="line">                <span class="keyword">if</span>(data == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>text.txt in resource file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello spring</span><br></pre></td></tr></table></figure><p>The result is like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello spring</span><br></pre></td></tr></table></figure><p>Recommend way is to prefix where the resource is coming from like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath:test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is ResourceAbstraction?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-ResourceLoader</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-ResourceLoader/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-ResourceLoader/</id>
    <published>2020-02-25T07:16:30.000Z</published>
    <updated>2020-02-25T07:33:12.076Z</updated>
    
    <content type="html"><![CDATA[<p>What is IOC ResourceLoader?</p><a id="more"></a><p><strong>Interface that provide function for read resource</strong></p><p>To get the Resource, need Resource Loader.</p><p>Fist of all, resource is any file for example txt, xml and so on.</p><p>Can use method ‘getResource’ for get some resource like below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Resource res = resourceLoader.getResource(<span class="string">"classpath:test.txt"</span>);</span><br><span class="line">        System.out.println(res.exists());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Primary"><a href="#1-Primary" class="headerlink" title="1. @Primary"></a>1. @Primary</h3><p>As BookService like below code. There are repository which extends BookRepository.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EwanBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then which BookRepository being inject?.</p><p>We can see BookRepository class name from setUp method with @PostConstruct.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bookRepository.getClass());</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result is fail because spring don’t know which class inject.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;task-2&quot; org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name &apos;springApplicationAdminRegistrar&apos;: Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:208)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)</span><br><span class="line">at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:245)</span><br><span class="line">at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:197)</span><br><span class="line">at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:134)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360)</span><br><span class="line">at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher.publishEventIfRequired(DataSourceInitializedPublisher.java:99)</span><br><span class="line">at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher.access$100(DataSourceInitializedPublisher.java:50)</span><br><span class="line">at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher$DataSourceSchemaCreatedPublisher.lambda$postProcessEntityManagerFactory$0(DataSourceInitializedPublisher.java:200)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>So if want enroll which class priority first, write @Primary like below code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EwanBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is success and can see class name that injected in BookService.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class com.example.demo.book.EwanBookRepository$$EnhancerBySpringCGLIB$$ab287e3a</span><br></pre></td></tr></table></figure><h3 id="2-List"><a href="#2-List" class="headerlink" title="2. List"></a>2. List</h3><p>If want get all class that type BookRepository, can inject as List.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">List&lt;BookRepository&gt; bookRepositoryList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bookRepositoryList.forEach(x -&gt;</span><br><span class="line">            System.out.println(x.getClass())</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class com.example.demo.book.EwanBookRepository$$EnhancerBySpringCGLIB$$289e3a54</span><br><span class="line">class com.example.demo.book.MyBookRepository$$EnhancerBySpringCGLIB$$a27f925b</span><br></pre></td></tr></table></figure><h3 id="3-Qualifier"><a href="#3-Qualifier" class="headerlink" title="3. Qualifier"></a>3. Qualifier</h3><p>Also can use class name in @Qualifier, but be careful first spelling should small letter even though class name is upper case.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"ewanBookRepository"</span>)</span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bookRepository.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class com.example.demo.book.EwanBookRepository$$EnhancerBySpringCGLIB$$289e3a54</span><br></pre></td></tr></table></figure><h3 id="4-Write-class-name"><a href="#4-Write-class-name" class="headerlink" title="4. Write class name"></a>4. Write class name</h3><p>Can write class name directly, spring can inject that class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository ewanBookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ewanBookRepository.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class com.example.demo.book.EwanBookRepository$$EnhancerBySpringCGLIB$$fc17c0d9</span><br></pre></td></tr></table></figure><h2 id="The-Recommended-way-is-Primary"><a href="#The-Recommended-way-is-Primary" class="headerlink" title="The Recommended way is @Primary."></a>The Recommended way is @Primary.</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is IOC ResourceLoader?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-ApplicationEventPublisher</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-ApplicationEventPublisher/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-ApplicationEventPublisher/</id>
    <published>2020-02-25T07:15:25.000Z</published>
    <updated>2020-02-25T07:33:25.927Z</updated>
    
    <content type="html"><![CDATA[<p>What is ApplicationEventPublisher?</p><a id="more"></a><ul><li>As implementation of Observer pattern, provide interface for event programming.</li></ul><h3 id="1-Make-Event"><a href="#1-Make-Event" class="headerlink" title="1. Make Event"></a>1. Make Event</h3><p>Event Publisher consist of occur part and receive part and Object to be used for delivery.</p><p>First, occur part.</p><p>To occur EventPublisher, should use ApplicationEventPublisher object, ApplicationContext has ApplicationEventPublisher object already.</p><p>And use publichEvent method with Object to be used for delivery inside.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, The Object to be used for delivery like below code.</p><p>In constructor, meaning of source is for can tracking what object occurred.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, <span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Third, receive part like below code.</p><p>Need to write <strong>@Component</strong> for register bean and a <strong>@EventListener</strong> on the method want to receive.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent myEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Event occurred -&gt; "</span> + myEvent.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Event occurred -&gt; 100</span><br></pre></td></tr></table></figure><h3 id="2-Handle-event"><a href="#2-Handle-event" class="headerlink" title="2. Handle event"></a>2. Handle event</h3><p>If there are over 2 receive handler, what is order?</p><p>Create another handler for test.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MyEvent myEvent)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Another -&gt; "</span>+myEvent.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then result is like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Event occurred -&gt; 100</span><br><span class="line">Another -&gt; 100</span><br></pre></td></tr></table></figure><p>If want to give order at each receiver, can write ‘@Order(Ordered.HIGHEST_PRECEDENCE)’.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MyEvent myEvent)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Another -&gt; "</span>+myEvent.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Another -&gt; 100</span><br><span class="line">Event occurred -&gt; 100</span><br></pre></td></tr></table></figure><p>When use to thread, need write <strong>@Async</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MyEvent myEvent)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current Thread -&gt; "</span> + Thread.currentThread().toString());</span><br><span class="line">        System.out.println(<span class="string">"Another -&gt; "</span>+myEvent.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And need write <strong>@EnableAsync</strong> in Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// Enable async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Events provided by spring.</p><ul><li><p>ContextRefreshedEvent : Occurs when create or refresh ApplicationContext.</p></li><li><p>ContextStartedEvent : Occurs when receive signal to start() ApplicationContext.</p></li><li><p>ContextStoppedEvent : Occurs when receive signal to stop() ApplicationContext.</p></li><li><p>ContextClosedEvent : Occurs when remove singleton bean to close() ApplicationContext.</p></li><li><p>RequestHandledEvent : Occurs when request HTTP.</p></li></ul><p>Code structure like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        ((ConfigurableApplicationContext)eventPublisher).start();</span><br><span class="line">        ((ConfigurableApplicationContext)eventPublisher).stop();</span><br><span class="line">        ((ConfigurableApplicationContext)eventPublisher).close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MyEvent myEvent)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current Thread -&gt; "</span> + Thread.currentThread().toString());</span><br><span class="line">        System.out.println(<span class="string">"Another -&gt; "</span>+myEvent.getData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ContextRefreshedEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Refresh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ContextStartedEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ContextStoppedEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ContextClosedEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Refresh</span><br><span class="line">2020-02-05 00:07:51.660  INFO 2848 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2020-02-05 00:07:51.663  INFO 2848 --- [           main] com.example.demo.Application             : Started Application in 2.354 seconds (JVM running for 3.252)</span><br><span class="line">class com.example.demo.eventPublisher.EventRunner</span><br><span class="line">Current Thread -&gt; Thread[main,5,main]</span><br><span class="line">Event occurred -&gt; 100</span><br><span class="line">Current Thread -&gt; Thread[task-2,5,main]</span><br><span class="line">Another -&gt; 100</span><br><span class="line">Start</span><br><span class="line">Stop</span><br><span class="line">Close</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is ApplicationEventPublisher?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-MessageSource</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-MessageSource/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-MessageSource/</id>
    <published>2020-02-25T07:13:42.000Z</published>
    <updated>2020-02-25T07:33:20.453Z</updated>
    
    <content type="html"><![CDATA[<p>What is IOC MessageSource?</p><a id="more"></a><p>MessageSource<br>Interface providing internationalization(i18n) functionality.</p><p>If use Spring boot, can use without any setting.</p><p>First of all, create file like below.</p><p><img src="/document/Spring/IOCing/IOC/MessageSource.PNG" alt="base"></p><p>Then just use code like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(messageSource.getMessage(<span class="string">"greeting"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"Ewan"</span>&#125;, Locale.KOREA));</span><br><span class="line">        System.out.println(messageSource.getMessage(<span class="string">"greeting"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"Ewan"</span>&#125;, Locale.getDefault()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is IOC MessageSource?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-Property</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-Property/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-Property/</id>
    <published>2020-02-25T07:10:52.000Z</published>
    <updated>2020-02-25T07:33:14.763Z</updated>
    
    <content type="html"><![CDATA[<p>What is IOC Scope?</p><a id="more"></a><p>Property</p><ul><li>Variable setting value in spring.</li><li>The Environment role is property source setting and get property value.</li></ul><p>Property Priority</p><ul><li>ServletConfig parameter</li><li>ServletContext parameter</li><li>JNDI (java:comp/env)</li><li>JVM system property (-Dkey=”value)</li><li>JVM system environment value</li></ul><p>Create properties file like below.</p><p><img src="/document/Spring/IOCing/IOC/property.PNG" alt="base"></p><p>And write annotation ‘@PropertySource(“classpath:/app.properties”)’.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/app.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then can get anywhere for example ‘environment.getProperty(“app.about”)’.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Environment environment = ctx.getEnvironment();</span><br><span class="line"></span><br><span class="line">        System.out.println(environment.getProperty(<span class="string">"app.about"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The expected result is like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is IOC Scope?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-Profile</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-Profile/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-Profile/</id>
    <published>2020-02-25T07:06:14.000Z</published>
    <updated>2020-02-25T07:33:17.685Z</updated>
    
    <content type="html"><![CDATA[<p>What is IOC Profile?</p><a id="more"></a><p>Spring profile is manage bean group.</p><p>Can see current active profile using getEnvironment method in ApplicationContext.</p><ul><li>How define profile.<ul><li>Define in class<ul><li>@Configuration @Profile(“test”)</li><li>@Component     @Profile(“test”)</li></ul></li><li>Define in method<ul><li>@Bean @Profile(“test”)</li></ul></li></ul></li></ul><p>First of all, make interface.        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also make TestProRepository.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProRepository</span> <span class="keyword">implements</span> <span class="title">ProRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And can use with Configuration class like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProRepository <span class="title">proRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestProRepository();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, should write configuration in VM setting.</p><p><img src="/document/Spring/IOCing/IOC/vmSetting.PNG" alt="base"></p><p>Let’s Execute code.</p><p>Once get Environment from ApplicationContext, use getActiveProfiles which has current active profile and getDefaultProfiles which just default.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProRepository proRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Environment environment = ctx.getEnvironment();</span><br><span class="line">        System.out.println(Arrays.toString(environment.getActiveProfiles()));</span><br><span class="line">        System.out.println(Arrays.toString(environment.getDefaultProfiles()));</span><br><span class="line"></span><br><span class="line">        System.out.println(proRepository.printState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[test]</span><br><span class="line">[default]</span><br><span class="line">Test!!!</span><br></pre></td></tr></table></figure><p>But don’t have to create configuration class, there is more convenient way.</p><p>Just write ‘@Profile(“test”)’ in class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProRepository</span> <span class="keyword">implements</span> <span class="title">ProRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And create another class for how to use profile.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"!test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTProRepositrory</span> <span class="keyword">implements</span> <span class="title">ProRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Not test!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As like above code, can write ‘@Profile(“!test”)’, it means that can write some operator in Profile annotation.</p><ul><li>Profile Operator<ul><li>! (not)</li><li>&amp; (and)</li><li>| (or)</li></ul></li></ul><p>Current configuration is like ‘-Dspring.profiles.active=”test” ‘, so the expected result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[test]</span><br><span class="line">[default]</span><br><span class="line">Test!!!</span><br></pre></td></tr></table></figure><p>If change VM configure ‘’-Dspring.profiles.active=”test222” ‘ ‘,so the expected result like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[test22]</span><br><span class="line">[default]</span><br><span class="line">Not test!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is IOC Profile?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC-Scope</title>
    <link href="http://yoursite.com/2020/02/24/Spring-IOC-Scope/"/>
    <id>http://yoursite.com/2020/02/24/Spring-IOC-Scope/</id>
    <published>2020-02-25T07:04:51.000Z</published>
    <updated>2020-02-25T07:33:09.005Z</updated>
    
    <content type="html"><![CDATA[<p>What is IOC Scope?</p><a id="more"></a><ul><li>There are two type scope in IOC.<ol><li>Singleton</li><li>Prototype<ul><li>Request</li><li>Session</li><li>Websocket</li><li>….</li></ul></li></ol></li></ul><h3 id="1-Singleton"><a href="#1-Singleton" class="headerlink" title="1. Singleton"></a>1. Singleton</h3><p>When make Bean in spring, should write @Component or @Controller or @Service and so on and default scope type is Singleton.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Prototype"><a href="#2-Prototype" class="headerlink" title="2. Prototype"></a>2. Prototype</h3><p>If want scope type prototype, should write prototype in @Scope like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><p>Let’s check scope example about above code.</p><p>First, configure Single class like this.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Proto proto;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Proto <span class="title">getProto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> proto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, configure Prototype class like this.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Single single;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As example above code, Single class type is Singleton and Proto class type is prototype.</p><p>Execute code for test like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScopeRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proto"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.getBean(Proto<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Proto<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Proto<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"single"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As like result, every Singleton class hashcode are same and every prototype code are different.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proto</span><br><span class="line">com.example.demo.scope.Proto@71466383</span><br><span class="line">com.example.demo.scope.Proto@46d63dbb</span><br><span class="line">com.example.demo.scope.Proto@4088741b</span><br><span class="line">single</span><br><span class="line">com.example.demo.scope.Single@178270b2</span><br><span class="line">com.example.demo.scope.Single@178270b2</span><br><span class="line">com.example.demo.scope.Single@178270b2</span><br></pre></td></tr></table></figure><p>How about Proto class in Single class?</p><p>Let’s test.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Proto proto;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Proto <span class="title">getProto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> proto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScopeRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Proto by single"</span>);</span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>).<span class="title">getProto</span>())</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>).<span class="title">getProto</span>())</span>;</span><br><span class="line">        System.out.println(ctx.getBean(Single<span class="class">.<span class="keyword">class</span>).<span class="title">getProto</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Proto by single</span><br><span class="line">com.example.demo.scope.Proto@38a1a26</span><br><span class="line">com.example.demo.scope.Proto@38a1a26</span><br><span class="line">com.example.demo.scope.Proto@38a1a26</span><br></pre></td></tr></table></figure><p>Why every Prototype class’s hashcode are same even though configuration prototype?</p><p>That reason is that the Single class configuration is a Singleton.</p><p>When Bean Created, Single class already assigned prototype.</p><p>If want Proto class working like prototype in Singleton Bean, should write ‘proxyMode’ like below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>, proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Single single;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The expected result was output.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Proto by single</span><br><span class="line">com.example.demo.scope.Proto@31ff6309</span><br><span class="line">com.example.demo.scope.Proto@204e90f7</span><br><span class="line">com.example.demo.scope.Proto@20a05b32</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is IOC Scope?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Develop" scheme="http://yoursite.com/categories/Develop/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Develop/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
</feed>
